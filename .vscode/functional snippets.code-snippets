{
  // Place your matts-platform workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Create Generic Repository": {
    "prefix": "fp-createRepository",
    "body": [
      "import { ${1:Entity} } from \"./${2:entityTypes}\";",
      "",
      "export type Save${1}Function = (",
      "  ${1:entity}: ${1} ",
      ") => Promise<void>;",
      "",
      "export type Get${1}ByIdFunction = (",
      "  id: string",
      ") => Promise<${1} | undefined>;",
      "",
      "export type Update${1}ByIdFunction = (",
      "  id: string,",
      "  updated${1}: Partial<${1}>",
      ") => Promise<${1} | undefined>;",
      "",
      "export type Remove${1}ByIdFunction = (",
      "  id: string",
      ") => Promise<boolean>;",
      "",
      "export const create${1}Repository = (",
      "  save${1}Fn?: Save${1}Function,",
      "  get${1}ByIdFn?: Get${1}ByIdFunction,",
      "  update${1}ByIdFn?: Update${1}ByIdFunction,",
      "  remove${1}ByIdFn?: Remove${1}ByIdFunction",
      ") => ({",
      "  save${1}: (${1:entity}: ${1}) => {",
      "    if (!save${1}Fn) {",
      "      throw new Error(\"save${1} function is not provided\");",
      "    }",
      "    return save${1}Fn(${1:entity});",
      "  },",
      "  get${1}ById: (id: string) => {",
      "    if (!get${1}ByIdFn) {",
      "      throw new Error(\"get${1}ById function is not provided\");",
      "    }",
      "    return get${1}ByIdFn(id);",
      "  },",
      "  update${1}ById: (id: string, updated${1}: Partial<${1}>) => {",
      "    if (!update${1}ByIdFn) {",
      "      throw new Error(\"update${1}ById function is not provided\");",
      "    }",
      "    return update${1}ByIdFn(id, updated${1});",
      "  },",
      "  remove${1}ById: (id: string) => {",
      "    if (!remove${1}ByIdFn) {",
      "      throw new Error(\"remove${1}ById function is not provided\");",
      "    }",
      "    return remove${1}ByIdFn(id);",
      "  },",
      "});"
    ],
    "description": "Create a generic repository for entity CRUD operations"
  },

  "Create Adapter": {
    "prefix": "fp-createAdapter",
    "body": [
      "import { ${1:Entity} } from \"./${2:entityTypes}\";",
      "",
      "const ${3:storageType}${1}s: { [key: string]: ${1} } = {};",
      "",
      "export const create${3:storageType}Save${1} = () => {",
      "  return async (${4:entity}: ${1}): Promise<void> => {",
      "    if (!${4:entity}.id) {",
      "      throw new Error(\"${1} must have an id\");",
      "    }",
      "    ${3:storageType}${1}s[${4:entity}.id] = ${4:entity};",
      "    console.log(\"${1} saved successfully.\");",
      "  };",
      "};",
      "",
      "export const create${3:storageType}Get${1}ById = () => {",
      "  return async (id: string): Promise<${1} | undefined> => {",
      "    return ${3:storageType}${1}s[id];",
      "  };",
      "};",
      "",
      "export const create${3:storageType}Update${1}ById = () => {",
      "  return async (",
      "    id: string,",
      "    updated${1}: Partial<${1}>",
      "  ): Promise<${1} | undefined> => {",
      "    const existing${1} = ${3:storageType}${1}s[id];",
      "    if (!existing${1}) return undefined;",
      "    const updatedEntity = { ...existing${1}, ...updated${1}, updated: new Date() };",
      "    ${3:storageType}${1}s[id] = updatedEntity;",
      "    return updatedEntity;",
      "  };",
      "};",
      "",
      "export const create${3:storageType}Remove${1}ById = () => {",
      "  return async (id: string): Promise<boolean> => {",
      "    if (!${3:storageType}${1}s[id]) return false;",
      "    delete ${3:storageType}${1}s[id];",
      "    return true;",
      "  };",
      "};"
    ],
    "description": "Create a generic adapter for CRUD operations"
  },
  "Generic Entity Functions": {
    "prefix": "fp-createEntityFunctions",
    "body": [
      "import { ${1:Entity}, ${1:EntityDTO} } from \"./${2:entityTypes}\";",
      "import { ${1:Entity}InputSchema } from \"./${3:entitySchema}\";",
      "import { z } from \"zod\";",
      "import { ulid } from \"ulid\";",
      "",
      "// Validation function",
      "export const validate${1}Input = (",
      "  input: unknown",
      "): z.infer<typeof ${1}InputSchema> => {",
      "  return ${1}InputSchema.parse(input);",
      "};",
      "",
      "// Entity creation function",
      "export const create${1}Entity = (",
      "  validatedInput: z.infer<typeof ${1}InputSchema>",
      "): ${1} => ({",
      "  id: ulid(),",
      "  firstName: validatedInput.firstName,",
      "  lastName: validatedInput.lastName,",
      "  status: validatedInput.status,",
      "  email: validatedInput.email,",
      "  created: new Date(),",
      "  updated: new Date(),",
      "});",
      "",
      "// DTO transformation function",
      "export const to${1}DTO = (${4:entity}: ${1}): ${1}DTO => ({",
      "  ...${4:entity},",
      "});"
    ],
    "description": "Generic functions for entity validation, creation, and transformation to DTO"
  }
}
